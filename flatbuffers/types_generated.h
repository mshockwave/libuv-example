// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TYPES_FBS_HW1_H_
#define FLATBUFFERS_GENERATED_TYPES_FBS_HW1_H_

#include "flatbuffers/flatbuffers.h"


namespace fbs {
namespace hw1 {

struct StringPayload;
struct BinaryPayload;
struct PairPayload;
struct EofPayload;

enum Payload {
  Payload_NONE = 0,
  Payload_StringPayload = 1,
  Payload_BinaryPayload = 2,
  Payload_PairPayload = 3,
  Payload_EofPayload = 4
};

inline const char **EnumNamesPayload() {
  static const char *names[] = { "NONE", "StringPayload", "BinaryPayload", "PairPayload", "EofPayload", nullptr };
  return names;
}

inline const char *EnumNamePayload(Payload e) { return EnumNamesPayload()[static_cast<int>(e)]; }

inline bool VerifyPayload(flatbuffers::Verifier &verifier, const void *union_obj, Payload type);

struct StringPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *content() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* content */) &&
           verifier.Verify(content()) &&
           verifier.EndTable();
  }
};

struct StringPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::String> content) { fbb_.AddOffset(4, content); }
  StringPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StringPayloadBuilder &operator=(const StringPayloadBuilder &);
  flatbuffers::Offset<StringPayload> Finish() {
    auto o = flatbuffers::Offset<StringPayload>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<StringPayload> CreateStringPayload(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> content = 0) {
  StringPayloadBuilder builder_(_fbb);
  builder_.add_content(content);
  return builder_.Finish();
}

struct BinaryPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<int8_t> *content() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* content */) &&
           verifier.Verify(content()) &&
           verifier.EndTable();
  }
};

struct BinaryPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::Vector<int8_t>> content) { fbb_.AddOffset(4, content); }
  BinaryPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BinaryPayloadBuilder &operator=(const BinaryPayloadBuilder &);
  flatbuffers::Offset<BinaryPayload> Finish() {
    auto o = flatbuffers::Offset<BinaryPayload>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<BinaryPayload> CreateBinaryPayload(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<int8_t>> content = 0) {
  BinaryPayloadBuilder builder_(_fbb);
  builder_.add_content(content);
  return builder_.Finish();
}

struct PairPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<int8_t> *content() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* content */) &&
           verifier.Verify(content()) &&
           verifier.EndTable();
  }
};

struct PairPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_content(flatbuffers::Offset<flatbuffers::Vector<int8_t>> content) { fbb_.AddOffset(6, content); }
  PairPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PairPayloadBuilder &operator=(const PairPayloadBuilder &);
  flatbuffers::Offset<PairPayload> Finish() {
    auto o = flatbuffers::Offset<PairPayload>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PairPayload> CreatePairPayload(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<int8_t>> content = 0) {
  PairPayloadBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_name(name);
  return builder_.Finish();
}

struct EofPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t isEof() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* isEof */) &&
           verifier.EndTable();
  }
};

struct EofPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_isEof(uint8_t isEof) { fbb_.AddElement<uint8_t>(4, isEof, 0); }
  EofPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EofPayloadBuilder &operator=(const EofPayloadBuilder &);
  flatbuffers::Offset<EofPayload> Finish() {
    auto o = flatbuffers::Offset<EofPayload>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<EofPayload> CreateEofPayload(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t isEof = 0) {
  EofPayloadBuilder builder_(_fbb);
  builder_.add_isEof(isEof);
  return builder_.Finish();
}

inline bool VerifyPayload(flatbuffers::Verifier &verifier, const void *union_obj, Payload type) {
  switch (type) {
    case Payload_NONE: return true;
    case Payload_StringPayload: return verifier.VerifyTable(reinterpret_cast<const StringPayload *>(union_obj));
    case Payload_BinaryPayload: return verifier.VerifyTable(reinterpret_cast<const BinaryPayload *>(union_obj));
    case Payload_PairPayload: return verifier.VerifyTable(reinterpret_cast<const PairPayload *>(union_obj));
    case Payload_EofPayload: return verifier.VerifyTable(reinterpret_cast<const EofPayload *>(union_obj));
    default: return false;
  }
}

}  // namespace hw1
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_TYPES_FBS_HW1_H_
