// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_RESPONSE_FBS_HW1_H_
#define FLATBUFFERS_GENERATED_RESPONSE_FBS_HW1_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace fbs {
namespace hw1 {
struct StringPayload;
struct BinaryPayload;
}  // namespace hw1
}  // namespace fbs

namespace fbs {
namespace hw1 {

struct Response;

enum Status {
  Status_OK = 0,
  Status_ERROR = 1
};

inline const char **EnumNamesStatus() {
  static const char *names[] = { "OK", "ERROR", nullptr };
  return names;
}

inline const char *EnumNameStatus(Status e) { return EnumNamesStatus()[static_cast<int>(e)]; }

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  Status status_code() const { return static_cast<Status>(GetField<int8_t>(4, 0)); }
  fbs::hw1::Payload extra_content_type() const { return static_cast<fbs::hw1::Payload>(GetField<uint8_t>(6, 0)); }
  const void *extra_content() const { return GetPointer<const void *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* status_code */) &&
           VerifyField<uint8_t>(verifier, 6 /* extra_content_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* extra_content */) &&
           VerifyPayload(verifier, extra_content(), extra_content_type()) &&
           verifier.EndTable();
  }
};

struct ResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status_code(Status status_code) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(status_code), 0); }
  void add_extra_content_type(fbs::hw1::Payload extra_content_type) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(extra_content_type), 0); }
  void add_extra_content(flatbuffers::Offset<void> extra_content) { fbb_.AddOffset(8, extra_content); }
  ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ResponseBuilder &operator=(const ResponseBuilder &);
  flatbuffers::Offset<Response> Finish() {
    auto o = flatbuffers::Offset<Response>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(flatbuffers::FlatBufferBuilder &_fbb,
   Status status_code = Status_OK,
   fbs::hw1::Payload extra_content_type = fbs::hw1::Payload_NONE,
   flatbuffers::Offset<void> extra_content = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_extra_content(extra_content);
  builder_.add_extra_content_type(extra_content_type);
  builder_.add_status_code(status_code);
  return builder_.Finish();
}

inline const fbs::hw1::Response *GetResponse(const void *buf) { return flatbuffers::GetRoot<fbs::hw1::Response>(buf); }

inline bool VerifyResponseBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::hw1::Response>(); }

inline void FinishResponseBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::hw1::Response> root) { fbb.Finish(root); }

}  // namespace hw1
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_RESPONSE_FBS_HW1_H_
