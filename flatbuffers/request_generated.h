// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_REQUEST_FBS_HW1_H_
#define FLATBUFFERS_GENERATED_REQUEST_FBS_HW1_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace fbs {
namespace hw1 {
struct StringPayload;
struct BinaryPayload;
struct PairPayload;
struct EofPayload;
}  // namespace hw1
}  // namespace fbs

namespace fbs {
namespace hw1 {

struct Request;

enum Cmd {
  Cmd_CD = 0,
  Cmd_LS = 1,
  Cmd_PUT = 2,
  Cmd_GET = 3,
  Cmd_QUIT = 4
};

inline const char **EnumNamesCmd() {
  static const char *names[] = { "CD", "LS", "PUT", "GET", "QUIT", nullptr };
  return names;
}

inline const char *EnumNameCmd(Cmd e) { return EnumNamesCmd()[static_cast<int>(e)]; }

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  Cmd command() const { return static_cast<Cmd>(GetField<int8_t>(4, 0)); }
  fbs::hw1::Payload payload_type() const { return static_cast<fbs::hw1::Payload>(GetField<uint8_t>(6, 0)); }
  const void *payload() const { return GetPointer<const void *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* command */) &&
           VerifyField<uint8_t>(verifier, 6 /* payload_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* payload */) &&
           VerifyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_command(Cmd command) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(command), 0); }
  void add_payload_type(fbs::hw1::Payload payload_type) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(payload_type), 0); }
  void add_payload(flatbuffers::Offset<void> payload) { fbb_.AddOffset(8, payload); }
  RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    auto o = flatbuffers::Offset<Request>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(flatbuffers::FlatBufferBuilder &_fbb,
   Cmd command = Cmd_CD,
   fbs::hw1::Payload payload_type = fbs::hw1::Payload_NONE,
   flatbuffers::Offset<void> payload = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  builder_.add_command(command);
  return builder_.Finish();
}

inline const fbs::hw1::Request *GetRequest(const void *buf) { return flatbuffers::GetRoot<fbs::hw1::Request>(buf); }

inline bool VerifyRequestBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::hw1::Request>(); }

inline void FinishRequestBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::hw1::Request> root) { fbb.Finish(root); }

}  // namespace hw1
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_REQUEST_FBS_HW1_H_
